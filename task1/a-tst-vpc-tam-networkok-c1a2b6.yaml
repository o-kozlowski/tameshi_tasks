---
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.10.0/24

  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.11.0/24
  
  DatabaseSubnet1Cidr:
    Type: String
    Default: 10.0.20.0/24

  DatabaseSubnet2Cidr:
    Type: String
    Default: 10.0.21.0/24

  BastionHostInstanceType:
    Type: String
    Default: t3a.micro
    Description: Default is t3a.micro

  BastionHostCidr:
    Type: String
    Default: 83.26.152.42/32

  BastionHostImageId:
    Type: String
    Default: ami-0069d66985b09d219

  Ec2KeyPair:
    Description: MyKP
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  #VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      EnableDnsSupport: True
      CidrBlock: !Ref VpcCidr
      Tags: 
      - Key: Name
        Value: MyVpc

  #PUBLIC SUBNETS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-west-1a"
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: True

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-west-1b"
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: True
  #PULBIC GATEWAY - INTERNET
  IntGateway:
    Type: AWS::EC2::InternetGateway
  
  IntGatewayVpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IntGateway
      VpcId: !Ref VPC
  #PUBLIC ROUTING
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref IntGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  #PRIVATE GATEWAYS - NAT
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt 
        - NatGatewayEIP
        - AllocationId

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  #PRIVATE SUBNETS 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-west-1a"
      CidrBlock: !Ref PrivateSubnet1Cidr

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-west-1b"
      CidrBlock: !Ref PrivateSubnet2Cidr
  #PRIVATE ROUTING 
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  #DATABASE SUBNETS - NO ROUTING
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-west-1a"
      CidrBlock: !Ref DatabaseSubnet1Cidr

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-west-1b"
      CidrBlock: !Ref DatabaseSubnet2Cidr
  #IAM SSM USER 
  IamSsmRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
          
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"

  IamSsmRoleInstance:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamSsmRole
  #BASTION HOST
  BastionHost: 
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BastionHostInstanceType
      ImageId: "ami-0069d66985b09d219"
      KeyName: !Ref Ec2KeyPair
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref IamSsmRoleInstance
      SecurityGroupIds: 
       - !Ref BastionSecGrp
  
  BastionSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Bastion Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref BastionHostCidr
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
Outputs:
  VPC:
    Description: A reference to VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
    
  PublicSubnet1:
    Description: A reference to PublicSubnet1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"
    
  PublicSubnet2:
    Description: A reference to PublicSubnet2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"
    
  PrivateSubnet1:
    Description: A reference to PrivateSubnet1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  
  PrivateSubnet2:
    Description: A reference to PrivateSubnet2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"
  
  DatabaseSubnet1:
    Description: A reference to DatabaseSubnet1
    Value: !Ref DatabaseSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseSubnet1"
    
  DatabaseSubnet2:
    Description: A reference to DatabaseSubnet2
    Value: !Ref DatabaseSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseSubnet2"
   
  BastionIp:
    Description: A reference to bastion Ip
    Value: !Ref BastionHostCidr
  
  BastionSecGroup:
    Description: A reference to bastion sec group
    Value: !Ref BastionSecGrp
    Export:
      Name: !Sub "${AWS::StackName}-BastionSecGroup"
    
  IamSsmRole:
    Description: A reference to IAM SSM role
    Value: !Ref IamSsmRole
    
  IamSsmRoleInstance:
    Description: A reference to IAM SSM instance profile
    Value: !Ref IamSsmRoleInstance
    Export:
      Name: !Sub "${AWS::StackName}-IamSsmRoleInstance"
    
  BastionDNS:
    Description: A reference to bastion dns
    Value: !GetAtt
      - BastionHost
      - PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-BastionDNS"
    
  BastionHostImageId:
    Description: A reference to bastion ami id
    Value: !Ref BastionHostImageId
    Export:
      Name: !Sub "${AWS::StackName}-BastionHostImageId"
    
  BastionHostInstanceType:
    Description: A reference to bastion instance type t3a.micro
    Value: !Ref BastionHostInstanceType
    Export:
      Name: !Sub "${AWS::StackName}-BastionHostInstanceType"

  